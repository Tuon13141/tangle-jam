using UnityEngine;
using System.Runtime.InteropServices;

namespace Percas
{
    public static class HapticManager
    {
        /// <summary>
        /// Triggers haptic feedback based on type and duration for Android.
        /// iOS Build Configuration
        /// To ensure the iOS plugin works correctly:
        /// Ensure the HapticFeedback.mm file is located in the Assets > Plugins > iOS folder.
        /// When building for iOS:
        /// Open the Xcode project generated by Unity.
        /// Ensure the HapticFeedback.mm file is included in the Build Phases > Compile Sources section in Xcode.
        /// </summary>
        public static void TriggerHapticFeedback(HapticType type, long milliseconds = 100)
        {
#if UNITY_ANDROID && !UNITY_EDITOR
            TriggerAndroidHaptic(milliseconds);
#elif UNITY_IOS && !UNITY_EDITOR
            TriggeriOSHaptic(type);
#else
            Debug.Log($"Vibration {type} = {milliseconds}");
#endif
        }

        // Android-specific haptic feedback with custom duration
        private static void TriggerAndroidHaptic(long milliseconds)
        {
#if UNITY_ANDROID && !UNITY_EDITOR
            using AndroidJavaObject unityActivity = new AndroidJavaClass("com.unity3d.player.UnityPlayer")
                .GetStatic<AndroidJavaObject>("currentActivity");
            using AndroidJavaObject context = unityActivity.Call<AndroidJavaObject>("getSystemService", "vibrator");
            int apiLevel = new AndroidJavaClass("android.os.Build$VERSION").GetStatic<int>("SDK_INT");
            if (apiLevel >= 26)
            {
                using AndroidJavaClass vibrationEffectClass = new("android.os.VibrationEffect");
                int defaultAmplitude = vibrationEffectClass.GetStatic<int>("DEFAULT_AMPLITUDE");
                AndroidJavaObject vibrationEffect = vibrationEffectClass.CallStatic<AndroidJavaObject>(
                    "createOneShot", milliseconds, defaultAmplitude);
                context.Call("vibrate", vibrationEffect);
            }
            else
            {
                context.Call("vibrate", milliseconds); // Fallback for older devices
            }
#endif
        }

        // iOS-specific haptic feedback
#if UNITY_IOS && !UNITY_EDITOR
        [DllImport("__Internal")]
        private static extern void PlayiOSHapticFeedback(int feedbackType);

        private static void TriggeriOSHaptic(HapticType type)
        {
            PlayiOSHapticFeedback((int)type);
        }
#endif
    }

    // Enum for haptic types
    public enum HapticType
    {
        Light,    // Light haptic feedback
        Medium,   // Medium haptic feedback
        Heavy     // Heavy haptic feedback
    }
}
